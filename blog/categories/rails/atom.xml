<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Developing Jon]]></title>
  <link href="http://jonr22.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jonr22.github.io/"/>
  <updated>2014-03-12T15:41:35-04:00</updated>
  <id>http://jonr22.github.io/</id>
  <author>
    <name><![CDATA[Jon Reimels]]></name>
    <email><![CDATA[jonr2219@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Should_receive]]></title>
    <link href="http://jonr22.github.io/blog/2014/02/03/should-receive/"/>
    <updated>2014-02-03T19:40:39-05:00</updated>
    <id>http://jonr22.github.io/blog/2014/02/03/should-receive</id>
    <content type="html"><![CDATA[<p>The other day I ran into some issues using the should_receive method provided by RSpec (in
<code>Spec::Mocks::Methods</code>). I was using it in a controller spec to test that a model was receiving the
appropriate method call. I&rsquo;m still not sure if I like using this type of check in a test or not,
but I guess that&rsquo;s a topic for another post.</p>

<p>My test was equivalent to something like this:
<code>ruby
it 'creates a new post' do
  Post.should_receive(:new).with('title' =&gt; 'TestTitle')
  post :create, post: { 'title' =&gt; 'TestTitle' }
end
</code></p>

<p>The error I was getting was:
<code>
NoMethodErrror: undefined method 'save' for nil:NilClass
</code></p>

<!-- more -->


<p>While I haven&rsquo;t had a chance to dig into the source code yet, I have a pretty good idea of what&rsquo;s
causing this error based on the behavior I&rsquo;ve seen.</p>

<p>So what I believe is happening, is that when the should_receive is used on a class, the method it
specifies is either intercepted or stubbed in some way such that it returns nil. In my issue above,
within my control when it calls &lsquo;new&rsquo; it gets a nil object back. It then calls save on the nil
object (the controller is just the default rails 4 generated controller) and we get the error above.</p>

<p>There are a few ways to solve this issue, the easiest is probably to mock the object returned by
new. Here&rsquo;s what that would look like:
```ruby
it &lsquo;creates a new post&rsquo; do
  p = mock_model(Post).as_null_object
  Post.should_receive(:new).</p>

<pre><code>with('title' =&gt; 'TestTitle').
and_return(p)
</code></pre>

<p>  post :create, post: { &lsquo;title&rsquo; => &lsquo;TestTitle&rsquo; }
end
```</p>

<p>The RSpec method <code>as_null_object</code> makes it so that the object can be passed any message and not
throw an error. So now we have the Post.new returning a mock object that can accept any message, so
when save is called, while it doesn&rsquo;t do anything, it also doesn&rsquo;t throw any exceptions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim]]></title>
    <link href="http://jonr22.github.io/blog/2013/09/10/vim/"/>
    <updated>2013-09-10T02:38:56-04:00</updated>
    <id>http://jonr22.github.io/blog/2013/09/10/vim</id>
    <content type="html"><![CDATA[<p>Square recently released their Vim setup on github
<a href="https://github.com/square/maximum-awesome/tree/master/vim/bundle">github.com/square/maximum-awesome/tree/master/vim/bundle</a>.
I&rsquo;ve had a look through it and I&rsquo;ve found some great stuff to add to my current vim setup
<a href="https://github.com/jonr22/dotfiles">github.com/jonr22/dotfiles</a>. They&rsquo;ve got some
useful stuff in there and I definitely recommmend checking it out. It&rsquo;s really great to see
these things being shared with the community!</p>

<!-- more -->


<p>I&rsquo;ve always loved using vim, but being new to Ruby and to Rails I didn&rsquo;t realize how many great
plugins there are out there (most of them seem to be by Tim Pope, he&rsquo;s got a lot of great Vim
stuff!!). This got me looking around and I found some good stuff from thoughtbot as well
<a href="https://github.com/thoughtbot/dotfiles">github.com/thoughtbot/dotfiles</a>.</p>

<p>Looking around at this stuff, I&rsquo;ve noticed that a lot of people seem to be using iTerm2, tmux, and zsh. I&rsquo;m going
to have to look at these soon, I&rsquo;ve always used bash and I&rsquo;m pretty comfortable with it, but
zsh might be worth a try. I&rsquo;ve done most of my terminal work on linux, so terminal.app was always
good enough for me when I&rsquo;ve been on my mac. These days I seem to be doing a lot more on mac instead of my
linux VMs though, so I&rsquo;m looking forward to trying out iTerm2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Model Validation]]></title>
    <link href="http://jonr22.github.io/blog/2013/09/08/custom-model-validation/"/>
    <updated>2013-09-08T14:45:14-04:00</updated>
    <id>http://jonr22.github.io/blog/2013/09/08/custom-model-validation</id>
    <content type="html"><![CDATA[<p>So far I&rsquo;ve always been able to use the validates method within my models in Rails to handle all of
my validation needs, whether it&rsquo;s checking a field exists, or checking its length, max/min values,
or comparing it to a regex, model validation has been extremely easy within Rails.</p>

<p>The other day I had a more complex validation requirement that I was worried would be more
difficult to integrate so that it worked similarly to the existing validations in the model.
However, after a few minutes of research I discovered how easy rails makes it to do exactly what I
wanted!</p>

<!-- more -->


<p>The validation requirement was to run an address through a Address Verification service and report
errors as needed.</p>

<p>Rails made this easy with the validate method, which takes a method as a symbol for it&rsquo;s parameter,
like this:</p>

<p><code>ruby
validate :validate_address
</code></p>

<p>Then in the method, you can add custom errors, so that when these errors have been added, the model
will be considered invalid, like this:</p>

<p>```ruby
def validate_address
  &hellip;
  validated = <validation service>
  if !validated</p>

<pre><code>errors.add(:base, "Address could not be verified!")
</code></pre>

<p>  end
  &hellip;
end
```</p>

<p>This adds errors to the base you can even get more specific and add the error messages to a
specific attribute like this:</p>

<p>```ruby
def validate_address
  &hellip;
  validate_status = <validation service>
  if !validate_status.address1</p>

<pre><code>errors.add(:address1, "Address could not be verified!")
</code></pre>

<p>  elsif !validate_status.city</p>

<pre><code>errors.add(:city, "Address could not be verified!")
</code></pre>

<p>  elsif &hellip;
  end
  &hellip;
end
```</p>

<p>As you can see this ability to hook into the Rails model validation makes it easy to customize the
validation of any models.</p>
]]></content>
  </entry>
  
</feed>
