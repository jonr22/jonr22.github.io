<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | Developing Jon]]></title>
  <link href="http://jonr22.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://jonr22.github.io/"/>
  <updated>2014-03-12T14:32:31-04:00</updated>
  <id>http://jonr22.github.io/</id>
  <author>
    <name><![CDATA[Jon Reimels]]></name>
    <email><![CDATA[jonr2219@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Should_receive]]></title>
    <link href="http://jonr22.github.io/blog/2014/02/03/should-receive/"/>
    <updated>2014-02-03T19:40:39-05:00</updated>
    <id>http://jonr22.github.io/blog/2014/02/03/should-receive</id>
    <content type="html"><![CDATA[<p>The other day I ran into some issues using the should_receive method provided by RSpec (in
<code>Spec::Mocks::Methods</code>). I was using it in a controller spec to test that a model was receiving the
appropriate method call. I&rsquo;m still not sure if I like using this type of check in a test or not,
but I guess that&rsquo;s a topic for another post.</p>

<p>My test was equivalent to something like this:
<code>ruby
it 'creates a new post' do
  Post.should_receive(:new).with('title' =&gt; 'TestTitle')
  post :create, post: { 'title' =&gt; 'TestTitle' }
end
</code></p>

<p>The error I was getting was:
<code>
NoMethodErrror: undefined method 'save' for nil:NilClass
</code></p>

<!-- more -->


<p>While I haven&rsquo;t had a chance to dig into the source code yet, I have a pretty good idea of what&rsquo;s
causing this error based on the behavior I&rsquo;ve seen.</p>

<p>So what I believe is happening, is that when the should_receive is used on a class, the method it
specifies is either intercepted or stubbed in some way such that it returns nil. In my issue above,
within my control when it calls &lsquo;new&rsquo; it gets a nil object back. It then calls save on the nil
object (the controller is just the default rails 4 generated controller) and we get the error above.</p>

<p>There are a few ways to solve this issue, the easiest is probably to mock the object returned by
new. Here&rsquo;s what that would look like:
```ruby
it &lsquo;creates a new post&rsquo; do
  p = mock_model(Post).as_null_object
  Post.should_receive(:new).</p>

<pre><code>with('title' =&gt; 'TestTitle').
and_return(p)
</code></pre>

<p>  post :create, post: { &lsquo;title&rsquo; => &lsquo;TestTitle&rsquo; }
end
```</p>

<p>The RSpec method <code>as_null_object</code> makes it so that the object can be passed any message and not
throw an error. So now we have the Post.new returning a mock object that can accept any message, so
when save is called, while it doesn&rsquo;t do anything, it also doesn&rsquo;t throw any exceptions.</p>
]]></content>
  </entry>
  
</feed>
