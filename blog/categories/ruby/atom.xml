<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Developing Jon]]></title>
  <link href="http://jonr22.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jonr22.github.io/"/>
  <updated>2014-03-12T15:52:54-04:00</updated>
  <id>http://jonr22.github.io/</id>
  <author>
    <name><![CDATA[Jon Reimels]]></name>
    <email><![CDATA[jonr2219@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://jonr22.github.io/blog/2014/03/12/octopress/"/>
    <updated>2014-03-12T15:24:39-04:00</updated>
    <id>http://jonr22.github.io/blog/2014/03/12/octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just started using the <a href="http://octopress.org/">octopress</a> blogging framework (A blogging
framework for hackers) and so far I really like it. It&rsquo;s super easy to setup, assuming you&rsquo;re
a developer / hacker (and especially if you&rsquo;re familiar with ruby). If you&rsquo;re interested, the
documentation on their website is very easy to follow.</p>

<p>Previously I was using wordpress, and while it&rsquo;s a fine platform, I never wanted to pay for
it, so my ability to customize felt very limited. Now with octopress I have complete
flexibility and since it&rsquo;s open source I have access to the code. In fact I&rsquo;ve already looked
around the code a bit to help me find the sass variables I needed to customize the look and feel
of the site.</p>

<!-- more -->


<p>Octopress has been setup so that it&rsquo;s very easy to customize, especially for small CSS changes.
They&rsquo;ve nicely setup a <code>custom</code> directory with sass stylesheets that get loaded last, so that
you can override any CSS settings and SASS variables. Overall it seems very well thought out.</p>

<p>Combine this with the ability to host the site on github for free and you&rsquo;ve got a great setup.
Not to mention, if you do much with github, then you&rsquo;re probably somewhat familiar with the
markdown language, so you already have the knowledge needed to create posts.</p>

<p>Another benefit that I like is being able to write my posts in my favorite editor, vim!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should_receive]]></title>
    <link href="http://jonr22.github.io/blog/2014/02/03/should-receive/"/>
    <updated>2014-02-03T19:40:39-05:00</updated>
    <id>http://jonr22.github.io/blog/2014/02/03/should-receive</id>
    <content type="html"><![CDATA[<p>The other day I ran into some issues using the should_receive method provided by RSpec (in
<code>Spec::Mocks::Methods</code>). I was using it in a controller spec to test that a model was receiving the
appropriate method call. I&rsquo;m still not sure if I like using this type of check in a test or not,
but I guess that&rsquo;s a topic for another post.</p>

<p>My test was equivalent to something like this:
<code>ruby
it 'creates a new post' do
  Post.should_receive(:new).with('title' =&gt; 'TestTitle')
  post :create, post: { 'title' =&gt; 'TestTitle' }
end
</code></p>

<p>The error I was getting was:
<code>
NoMethodErrror: undefined method 'save' for nil:NilClass
</code></p>

<!-- more -->


<p>While I haven&rsquo;t had a chance to dig into the source code yet, I have a pretty good idea of what&rsquo;s
causing this error based on the behavior I&rsquo;ve seen.</p>

<p>So what I believe is happening, is that when the should_receive is used on a class, the method it
specifies is either intercepted or stubbed in some way such that it returns nil. In my issue above,
within my control when it calls &lsquo;new&rsquo; it gets a nil object back. It then calls save on the nil
object (the controller is just the default rails 4 generated controller) and we get the error above.</p>

<p>There are a few ways to solve this issue, the easiest is probably to mock the object returned by
new. Here&rsquo;s what that would look like:
```ruby
it &lsquo;creates a new post&rsquo; do
  p = mock_model(Post).as_null_object
  Post.should_receive(:new).</p>

<pre><code>with('title' =&gt; 'TestTitle').
and_return(p)
</code></pre>

<p>  post :create, post: { &lsquo;title&rsquo; => &lsquo;TestTitle&rsquo; }
end
```</p>

<p>The RSpec method <code>as_null_object</code> makes it so that the object can be passed any message and not
throw an error. So now we have the Post.new returning a mock object that can accept any message, so
when save is called, while it doesn&rsquo;t do anything, it also doesn&rsquo;t throw any exceptions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim]]></title>
    <link href="http://jonr22.github.io/blog/2013/09/10/vim/"/>
    <updated>2013-09-10T02:38:56-04:00</updated>
    <id>http://jonr22.github.io/blog/2013/09/10/vim</id>
    <content type="html"><![CDATA[<p>Square recently released their Vim setup on github
<a href="https://github.com/square/maximum-awesome/tree/master/vim/bundle">github.com/square/maximum-awesome/tree/master/vim/bundle</a>.
I&rsquo;ve had a look through it and I&rsquo;ve found some great stuff to add to my current vim setup
<a href="https://github.com/jonr22/dotfiles">github.com/jonr22/dotfiles</a>. They&rsquo;ve got some
useful stuff in there and I definitely recommmend checking it out. It&rsquo;s really great to see
these things being shared with the community!</p>

<!-- more -->


<p>I&rsquo;ve always loved using vim, but being new to Ruby and to Rails I didn&rsquo;t realize how many great
plugins there are out there (most of them seem to be by Tim Pope, he&rsquo;s got a lot of great Vim
stuff!!). This got me looking around and I found some good stuff from thoughtbot as well
<a href="https://github.com/thoughtbot/dotfiles">github.com/thoughtbot/dotfiles</a>.</p>

<p>Looking around at this stuff, I&rsquo;ve noticed that a lot of people seem to be using iTerm2, tmux, and zsh. I&rsquo;m going
to have to look at these soon, I&rsquo;ve always used bash and I&rsquo;m pretty comfortable with it, but
zsh might be worth a try. I&rsquo;ve done most of my terminal work on linux, so terminal.app was always
good enough for me when I&rsquo;ve been on my mac. These days I seem to be doing a lot more on mac instead of my
linux VMs though, so I&rsquo;m looking forward to trying out iTerm2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defined Symbols]]></title>
    <link href="http://jonr22.github.io/blog/2013/09/07/defined-symbols/"/>
    <updated>2013-09-07T16:51:56-04:00</updated>
    <id>http://jonr22.github.io/blog/2013/09/07/defined-symbols</id>
    <content type="html"><![CDATA[<p>I was playing in irb and I wanted to look at the defined symbols, conveniently you can use</p>

<p><code>ruby
Symbol.all_symbols
</code></p>

<p>then I decided to check if some particular symbols were defined, so I ran the following command</p>

<p><code>ruby
Symbol.all_symbols.include?(:abcde)
</code></p>

<!-- more -->


<p>However, I immediately found it curious to see that every symbol I tried was coming up as being included in the Symbol.all_symbols array.</p>

<p>Thinking about it however, this make perfect sense, the symbol was defined as part of the statement I executed and therefore added to the Symbol.all_symbols array and so it was found as being included in this array.</p>

<p>I still wanted to be able to find if a symbol was defined (not that it particularly matters whether it&rsquo;s defined or not, but I was having fun) so I came up with using the any? method provided by Enumerable, and instead of looking for a symbol, I looked for the string equivalent, like so:</p>

<p><code>ruby
Symbol.all_symbols.any? { |s| s.to_s == "abcde" }
</code></p>

<p>I don&rsquo;t think this is particularly useful to many people, but I found it interesting and I think it shows how flexible Ruby is, in that I was still able to come up with a fairly simple one-line statement to accomplish what I was looking for.</p>
]]></content>
  </entry>
  
</feed>
